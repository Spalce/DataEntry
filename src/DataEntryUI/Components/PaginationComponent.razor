<div class="col-12">
  <nav aria-label="Page navigation example">
    <ul class="pagination justify-content-center">
      @foreach (var link in _links)
      {
        <li @onclick="@(() => SelectedPageInternal(link))" style="cursor: pointer; display: @(link.Enabled ? null : "none");" 
            class="page-item @(link.Active ? "active" : null)">
          <span class="page-link" href="#">@link.Text</span>
        </li>
      }
    </ul>
  </nav>
</div>


@code {
  [Parameter] public int CurrentPage { get; set; }
  [Parameter] public int TotalPages { get; set; }
  [Parameter] public int Radius { get; set; }
  [Parameter] public EventCallback<int> SelectedPage { get; set; }
  List<LinkModel> _links;
  
  protected override void OnParametersSet()
  {
    LoadPages();
  }

  private async Task SelectedPageInternal(LinkModel link)
  {
    if (link.Page == CurrentPage)
    {
      return;
    }
    if (!link.Enabled)
    {
      return;
    }
    CurrentPage = link.Page;
    await SelectedPage.InvokeAsync(link.Page);
  }

  private void LoadPages()
  {
    _links = new List<LinkModel>();
    var isFirstPageLinkEnabled = CurrentPage > 1;
    var firstPage = 1;
    _links.Add(new LinkModel(firstPage, isFirstPageLinkEnabled, "First"));
    
    var isPreviousPageLinkEnabled = CurrentPage != 1;
    var previousPage = CurrentPage - 1;
    _links.Add(new LinkModel(previousPage, isPreviousPageLinkEnabled, "Previous"));
    
    for (int i = 1; i <= TotalPages; i++)
    {
      if (i >= CurrentPage - Radius && i <= CurrentPage + Radius)
      {
        _links.Add(new LinkModel(i) {Active = CurrentPage == i });
      }
    }
    
    var isNextPageLinkEnabled = CurrentPage != TotalPages;
    var nextPage = CurrentPage + 1;
    _links.Add(new LinkModel(nextPage, isNextPageLinkEnabled, "Next"));
    
    var isLastPageLinkEnabled = CurrentPage < TotalPages;
    var lastPage = TotalPages;
    _links.Add(new LinkModel(lastPage, isLastPageLinkEnabled, "Last"));
  }

  class LinkModel
  {
    public LinkModel(int page) : this(page, true)
    {}
    
    public LinkModel(int page, bool enabled) : this(page, enabled, page.ToString())
    {}

    public LinkModel(int page, bool enabled, string text)
    {
      Page = page;
      Enabled = enabled;
      Text = text;
    }

    public string Text { get; set; }
    public int Page { get; set; }
    public bool Enabled { get; set; }
    public bool Active { get; set; }
  }
}